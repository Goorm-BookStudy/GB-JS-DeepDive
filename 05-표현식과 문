# 5장 표현식과 문

# 5.1 값

<aside>
❓ 값 : 식(표현식)이 평가되어 생성된 결과

</aside>

평가란 식을 해석해서 값을 생성하거나 참조하는 것을 말한다.

```jsx
10 + 20; //평가되어 숫자 값 30을 생성
```

모든 값은 데이터 타입을 갖는다.

메모리에 2진수(비트의 나열)로 저장된다.

메모리에 저장된 값은 데이터 타입에 따라 다르게 해석될 수 있다.

변수는 `하나의 값`을 저장하기 위해 확보한 메모리 공간 자체 또는 그 메모리 공간을 식별하기 위해 붙인 이름.

변수에 할당되는 것은 `값`이다. 따라서 할당 전 평가되어 값을 생성하고, 평가된 값이 변수에 할당되어야 한다.

# 5.2 리터럴

<aside>
❓ 리터럴 : 사람이 이해할 수 있는 문자 또는 약속된 기호를 사용해 값을 생성하는 표기법

</aside>

```jsx
//숫자리터럴 3
3;
```

→ 여기서 3은 단순한 아라비아 숫자가 아니라 숫자 리터럴

→ 사람이 이해할 수 있는 아라비아 숫자를 사용해 숫자 리터럴 3을 코드에 기술

→ 자바스크립트 엔진이 평가해 숫자 3을 생성

리터럴 3이 평가되어 → 값인 숫자 3 생성

## 리터럴의 평가

- 자바스크립트 엔진은 코드 실행 시점인 런타임에 리터럴을 평가해 값을 생성한다.

# 5.3 표현식

<aside>
❓ 표현식은 `값으로 평가`될 수 있는 문이다. 즉 표현식이 평가되면 새로운 값을 생성하거나 기존의 값을 참조한다.

</aside>

## 리터럴

```jsx
var score = 100;
```

→ 여기서 100은 리터럴. 100은 숫자 100으로 평가된다. 따라서 그 자체로 리터럴은 표현식이다.

## 연산 결과

```jsx
var score = 50 + 50; //평가되어 숫자 100을 생성하므로 표현식
```

## 식별자 참조

```jsx
score; // 100
```

값을 생성하지는 않지만 평가되므로 표현식

결론 : 값으로 평가될 수 있는 문은 모두 표현식

이때, 표현식과 표현식이 평가된 값은 동등한 관계(동치)이다. 이는 값이 위치할 수 있는 자리에 표현식도 위치할 수 있다는 의미이다.

# 5.4 문

<aside>
❓ 문 : 프로그램을 구성하는 기본 단위이자 최소 실행 단위 ( == 명령문)

</aside>

- 문의 집합으로 이뤄진 것이 프로그램이며, 문을 작성하고 순서에 맞게 나열하는 것이 프로그래밍이다.
- 명령문이라고도 부르며, 컴퓨터에 내리는 명령이다.
- 문은 선언문, 할당문, 조건문, 반복문 등으로 구분할 수 있다.
- 변수 선언문을 실행하면 변수 선언, 할당 실행문을 실행하면 값 할당, 조건문 실행시 지정 조건에 따라 실행할 코드 블록 결정 등

문은 토큰으로 구성된다.

<aside>
❓ 토큰 : 문법적인 의미를 가지며, 문법적으로 더 이상 나눌 수 없는 코드의 기본요소를 의미

</aside>

예) 키워드, 식별자, 연산자. 리터럴, 세미콜론, 마침표 등

```jsx
//변수 선언문
var x;

//할당문
x = 5;

//함수 선언문
fuction foo() {}

//조건문
if (x>1) { console.log(x);}

//반복문
for ( var i = 0; i<2 ; i++) {console.log(i);}
```

# 5.5 세미콜론과 세미콜론 자동 삽입 기능

`세미콜론(;)은 문의 종료`를 나타낸다.

- 자바스크립트 엔진은 세미콜론으로 문이 종료한 위치를 파악하고 순차적으로 하나씩 문을 실행한다.
- 따라서 문을 끝낼 때는 세미콜론을 붙여야 한다.
- 단, 코드 블록({…}) 뒤에는 세미콜론을 붙이지 않는다. 코드 블록은 자체 종결성을 갖는다.
- 하지만 문의 끝에 붙이는 세미콜론은 세미콜론 자동 삽입 기능이 암묵적으로 수행되기 때문에 옵션이다. (하지만 권장하기는 붙이기를 권장한다.)

<aside>
❓ 세미콜론 자동 삽입 기능(ASI, automatic semicolon insertion) : 자바스크립트 엔진이 소스코드를 해석할 떄 문의 끝이라고 예측되는 지점에 세미콜론을 자동으로 붙여주는 기능

</aside>

# 5.6 표현식인 문과 표현식이 아닌 문

표현식은 문의 일부일 수도 있고, 그 자체로 문이 될 수도 있다.

```jsx
var x; //변수 선언문은 값으로 평가될 수 없으므로 표현식이 아니다.

x = 1 + 2; //이는 표현식이면서 완전한 문이다.
```

문은 표현식일 수도 있고 아닐수도 있다.

표현식인 문 : 값으로 평가될 수 있는 문 예) 할당문 var foo = x = 100;

표현식이 아닌 문 : 값으로 평가될 수 없는 문 예) 변수 선언문

## 표현식인 문과 아닌 문 구분하는 방법?

표현식인 문과 표현식이 아닌 문을 구별하는 가장 간단하고 명료한 방법은 **변수에 할당**해 보는 것이다.
